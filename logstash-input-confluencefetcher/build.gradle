import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"
apply plugin: "eclipse"

// ===========================================================================
// plugin info
// ===========================================================================
group                      'eu.wajja.input.fetcher' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Logstash Confluence Fetcher"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
pluginInfo.authors         = ['Mahy Tom']
pluginInfo.email           = ['mail@tommahy.com']
pluginInfo.homepage        = "http://#"
pluginInfo.pluginType      = "input"
pluginInfo.pluginClass     = "ConfluenceFetcher"
pluginInfo.pluginName      = "confluencefetcher" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

repositories {
    mavenCentral()
    maven {
      url "https://maven.atlassian.com/content/repositories/atlassian-public/"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = null
}

dependencies {
   	// Dependencies for JSON-RCP
   	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
	
	// Dependencies for REST
	compile group: 'com.atlassian.confluence', name: 'confluence-rest-client', version: '7.3.3'
	
	// Java 11
	compile group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.3'

   	// And all the other dependencies
   	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
   	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
   	compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
	compile group: 'com.atlassian.confluence', name: 'confluence-rest-client', version: '6.15.9'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
	compile group: 'org.codehaus.jackson', name: 'jackson-xc', version: '1.9.13'
	compile group: 'org.codehaus.jackson', name: 'jackson-jaxrs', version: '1.9.13'
  
	// Logging
    compile fileTree(dir: LOGSTASH_CORE_PATH, include: "**/logstash-core-?.?.?.jar")
	compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
	compile group: 'commons-discovery', name: 'commons-discovery', version: '0.4'
	
	// Tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.jruby:jruby-complete:9.1.13.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
}

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task vendor(dependsOn: shadowJar) {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

task generateRubySupportFiles() {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

task removeObsoleteJars() {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

task gem(dependsOn: [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]) {
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}
